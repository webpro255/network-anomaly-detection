/* Autogenerated by mlir-tblgen; don't manually edit */

#ifdef GEN_PASS_DECL
// Generate declarations for all passes.
#define GEN_PASS_DECL_MATERIALIZELOADSTORE
#define GEN_PASS_DECL_TRITONGPUADDDESCRIPTORARGS
#define GEN_PASS_DECL_TRITONGPUFENCEINSERTION
#define GEN_PASS_DECL_TRITONGPUPLANCTAPASS
#define GEN_PASS_DECL_TRITONGPUREWRITETENSORPOINTER
#define GEN_PASS_DECL_TRITONGPUWSDECOMPOSING
#define GEN_PASS_DECL_TRITONGPUWSFEASIBILITYCHECKING
#define GEN_PASS_DECL_TRITONGPUWSFIXUPMISSINGATTRS
#define GEN_PASS_DECL_TRITONGPUWSMATERIALIZATION
#define GEN_PASS_DECL_TRITONGPUWSMUTEX
#define GEN_PASS_DECL_TRITONGPUWSPIPELINE
#undef GEN_PASS_DECL
#endif // GEN_PASS_DECL

//===----------------------------------------------------------------------===//
// MaterializeLoadStore
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_MATERIALIZELOADSTORE
struct MaterializeLoadStoreOptions {
  int32_t numWarps = 4;
  int32_t computeCapability = 80;
};
#undef GEN_PASS_DECL_MATERIALIZELOADSTORE
#endif // GEN_PASS_DECL_MATERIALIZELOADSTORE
#ifdef GEN_PASS_DEF_MATERIALIZELOADSTORE
namespace impl {

template <typename DerivedT>
class MaterializeLoadStoreBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = MaterializeLoadStoreBase;

  MaterializeLoadStoreBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  MaterializeLoadStoreBase(const MaterializeLoadStoreBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("triton-nvidia-gpu-materialize-load-store");
  }
  ::llvm::StringRef getArgument() const override { return "triton-nvidia-gpu-materialize-load-store"; }

  ::llvm::StringRef getDescription() const override { return "materialize load & store"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("MaterializeLoadStore");
  }
  ::llvm::StringRef getName() const override { return "MaterializeLoadStore"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::triton::gpu::TritonGPUDialect>();
    registry.insert<mlir::triton::nvidia_gpu::TritonNvidiaGPUDialect>();
    registry.insert<mlir::scf::SCFDialect>();
    registry.insert<mlir::arith::ArithDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(MaterializeLoadStoreBase<DerivedT>)

  MaterializeLoadStoreBase(const MaterializeLoadStoreOptions &options) : MaterializeLoadStoreBase() {
    numWarps = options.numWarps;
    computeCapability = options.computeCapability;
  }
protected:
  ::mlir::Pass::Option<int32_t> numWarps{*this, "num-warps", ::llvm::cl::desc("number of warps per block"), ::llvm::cl::init(4)};
  ::mlir::Pass::Option<int32_t> computeCapability{*this, "compute-capability", ::llvm::cl::desc("device compute capability"), ::llvm::cl::init(80)};
private:
};
} // namespace impl
#undef GEN_PASS_DEF_MATERIALIZELOADSTORE
#endif // GEN_PASS_DEF_MATERIALIZELOADSTORE

//===----------------------------------------------------------------------===//
// TritonGPUAddDescriptorArgs
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_TRITONGPUADDDESCRIPTORARGS
#undef GEN_PASS_DECL_TRITONGPUADDDESCRIPTORARGS
#endif // GEN_PASS_DECL_TRITONGPUADDDESCRIPTORARGS
#ifdef GEN_PASS_DEF_TRITONGPUADDDESCRIPTORARGS
namespace impl {

template <typename DerivedT>
class TritonGPUAddDescriptorArgsBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = TritonGPUAddDescriptorArgsBase;

  TritonGPUAddDescriptorArgsBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  TritonGPUAddDescriptorArgsBase(const TritonGPUAddDescriptorArgsBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("triton-nvidia-gpu-add-descriptor-args");
  }
  ::llvm::StringRef getArgument() const override { return "triton-nvidia-gpu-add-descriptor-args"; }

  ::llvm::StringRef getDescription() const override { return ""; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TritonGPUAddDescriptorArgs");
  }
  ::llvm::StringRef getName() const override { return "TritonGPUAddDescriptorArgs"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TritonGPUAddDescriptorArgsBase<DerivedT>)

protected:
private:
};
} // namespace impl
#undef GEN_PASS_DEF_TRITONGPUADDDESCRIPTORARGS
#endif // GEN_PASS_DEF_TRITONGPUADDDESCRIPTORARGS

//===----------------------------------------------------------------------===//
// TritonGPUFenceInsertion
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_TRITONGPUFENCEINSERTION
struct TritonGPUFenceInsertionOptions {
  int32_t computeCapability = 90;
};
#undef GEN_PASS_DECL_TRITONGPUFENCEINSERTION
#endif // GEN_PASS_DECL_TRITONGPUFENCEINSERTION
#ifdef GEN_PASS_DEF_TRITONGPUFENCEINSERTION
namespace impl {

template <typename DerivedT>
class TritonGPUFenceInsertionBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = TritonGPUFenceInsertionBase;

  TritonGPUFenceInsertionBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  TritonGPUFenceInsertionBase(const TritonGPUFenceInsertionBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("triton-nvidia-gpu-fence-insertion");
  }
  ::llvm::StringRef getArgument() const override { return "triton-nvidia-gpu-fence-insertion"; }

  ::llvm::StringRef getDescription() const override { return "Insert fences across generic and async proxy"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TritonGPUFenceInsertion");
  }
  ::llvm::StringRef getName() const override { return "TritonGPUFenceInsertion"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::triton::gpu::TritonGPUDialect>();
    registry.insert<mlir::triton::nvidia_gpu::TritonNvidiaGPUDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TritonGPUFenceInsertionBase<DerivedT>)

  TritonGPUFenceInsertionBase(const TritonGPUFenceInsertionOptions &options) : TritonGPUFenceInsertionBase() {
    computeCapability = options.computeCapability;
  }
protected:
  ::mlir::Pass::Option<int32_t> computeCapability{*this, "compute-capability", ::llvm::cl::desc("device compute capability"), ::llvm::cl::init(90)};
private:
};
} // namespace impl
#undef GEN_PASS_DEF_TRITONGPUFENCEINSERTION
#endif // GEN_PASS_DEF_TRITONGPUFENCEINSERTION

//===----------------------------------------------------------------------===//
// TritonGPUPlanCTAPass
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_TRITONGPUPLANCTAPASS
#undef GEN_PASS_DECL_TRITONGPUPLANCTAPASS
#endif // GEN_PASS_DECL_TRITONGPUPLANCTAPASS
#ifdef GEN_PASS_DEF_TRITONGPUPLANCTAPASS
namespace impl {

template <typename DerivedT>
class TritonGPUPlanCTAPassBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = TritonGPUPlanCTAPassBase;

  TritonGPUPlanCTAPassBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  TritonGPUPlanCTAPassBase(const TritonGPUPlanCTAPassBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("triton-nvidia-gpu-plan-cta");
  }
  ::llvm::StringRef getArgument() const override { return "triton-nvidia-gpu-plan-cta"; }

  ::llvm::StringRef getDescription() const override { return "plan CTA"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TritonGPUPlanCTAPass");
  }
  ::llvm::StringRef getName() const override { return "TritonGPUPlanCTAPass"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::triton::gpu::TritonGPUDialect>();
    registry.insert<mlir::triton::nvidia_gpu::TritonNvidiaGPUDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TritonGPUPlanCTAPassBase<DerivedT>)

protected:
private:
};
} // namespace impl
#undef GEN_PASS_DEF_TRITONGPUPLANCTAPASS
#endif // GEN_PASS_DEF_TRITONGPUPLANCTAPASS

//===----------------------------------------------------------------------===//
// TritonGPURewriteTensorPointer
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_TRITONGPUREWRITETENSORPOINTER
struct TritonGPURewriteTensorPointerOptions {
  int32_t computeCapability = 80;
};
#undef GEN_PASS_DECL_TRITONGPUREWRITETENSORPOINTER
#endif // GEN_PASS_DECL_TRITONGPUREWRITETENSORPOINTER
#ifdef GEN_PASS_DEF_TRITONGPUREWRITETENSORPOINTER
namespace impl {

template <typename DerivedT>
class TritonGPURewriteTensorPointerBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = TritonGPURewriteTensorPointerBase;

  TritonGPURewriteTensorPointerBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  TritonGPURewriteTensorPointerBase(const TritonGPURewriteTensorPointerBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("tritongpu-rewrite-tensor-pointer");
  }
  ::llvm::StringRef getArgument() const override { return "tritongpu-rewrite-tensor-pointer"; }

  ::llvm::StringRef getDescription() const override { return "Rewrite load/stores with tensor pointers into legacy load/stores"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TritonGPURewriteTensorPointer");
  }
  ::llvm::StringRef getName() const override { return "TritonGPURewriteTensorPointer"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::triton::gpu::TritonGPUDialect>();
    registry.insert<mlir::triton::TritonDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TritonGPURewriteTensorPointerBase<DerivedT>)

  TritonGPURewriteTensorPointerBase(const TritonGPURewriteTensorPointerOptions &options) : TritonGPURewriteTensorPointerBase() {
    computeCapability = options.computeCapability;
  }
protected:
  ::mlir::Pass::Option<int32_t> computeCapability{*this, "compute-capability", ::llvm::cl::desc("device compute capability"), ::llvm::cl::init(80)};
private:
};
} // namespace impl
#undef GEN_PASS_DEF_TRITONGPUREWRITETENSORPOINTER
#endif // GEN_PASS_DEF_TRITONGPUREWRITETENSORPOINTER

//===----------------------------------------------------------------------===//
// TritonGPUWSDecomposing
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_TRITONGPUWSDECOMPOSING
struct TritonGPUWSDecomposingOptions {
  int32_t computeCapability = 80;
};
#undef GEN_PASS_DECL_TRITONGPUWSDECOMPOSING
#endif // GEN_PASS_DECL_TRITONGPUWSDECOMPOSING
#ifdef GEN_PASS_DEF_TRITONGPUWSDECOMPOSING
namespace impl {

template <typename DerivedT>
class TritonGPUWSDecomposingBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = TritonGPUWSDecomposingBase;

  TritonGPUWSDecomposingBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  TritonGPUWSDecomposingBase(const TritonGPUWSDecomposingBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("triton-nvidia-gpu-ws-decomposing");
  }
  ::llvm::StringRef getArgument() const override { return "triton-nvidia-gpu-ws-decomposing"; }

  ::llvm::StringRef getDescription() const override { return "Clustering on the ops according to their performance hotspots"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TritonGPUWSDecomposing");
  }
  ::llvm::StringRef getName() const override { return "TritonGPUWSDecomposing"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::triton::gpu::TritonGPUDialect>();
    registry.insert<mlir::triton::nvidia_gpu::TritonNvidiaGPUDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TritonGPUWSDecomposingBase<DerivedT>)

  TritonGPUWSDecomposingBase(const TritonGPUWSDecomposingOptions &options) : TritonGPUWSDecomposingBase() {
    computeCapability = options.computeCapability;
  }
protected:
  ::mlir::Pass::Option<int32_t> computeCapability{*this, "compute-capability", ::llvm::cl::desc("device compute capability"), ::llvm::cl::init(80)};
private:
};
} // namespace impl
#undef GEN_PASS_DEF_TRITONGPUWSDECOMPOSING
#endif // GEN_PASS_DEF_TRITONGPUWSDECOMPOSING

//===----------------------------------------------------------------------===//
// TritonGPUWSFeasibilityChecking
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_TRITONGPUWSFEASIBILITYCHECKING
struct TritonGPUWSFeasibilityCheckingOptions {
  int32_t computeCapability = 90;
};
#undef GEN_PASS_DECL_TRITONGPUWSFEASIBILITYCHECKING
#endif // GEN_PASS_DECL_TRITONGPUWSFEASIBILITYCHECKING
#ifdef GEN_PASS_DEF_TRITONGPUWSFEASIBILITYCHECKING
namespace impl {

template <typename DerivedT>
class TritonGPUWSFeasibilityCheckingBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = TritonGPUWSFeasibilityCheckingBase;

  TritonGPUWSFeasibilityCheckingBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  TritonGPUWSFeasibilityCheckingBase(const TritonGPUWSFeasibilityCheckingBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("triton-nvidia-gpu-ws-feasibility-checking");
  }
  ::llvm::StringRef getArgument() const override { return "triton-nvidia-gpu-ws-feasibility-checking"; }

  ::llvm::StringRef getDescription() const override { return "Attach attr named TritonNvidiaGPUDialect::getWSSupportedAttrName() if auto WS supported"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TritonGPUWSFeasibilityChecking");
  }
  ::llvm::StringRef getName() const override { return "TritonGPUWSFeasibilityChecking"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::triton::gpu::TritonGPUDialect>();
    registry.insert<mlir::triton::nvidia_gpu::TritonNvidiaGPUDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TritonGPUWSFeasibilityCheckingBase<DerivedT>)

  TritonGPUWSFeasibilityCheckingBase(const TritonGPUWSFeasibilityCheckingOptions &options) : TritonGPUWSFeasibilityCheckingBase() {
    computeCapability = options.computeCapability;
  }
protected:
  ::mlir::Pass::Option<int32_t> computeCapability{*this, "compute-capability", ::llvm::cl::desc("device compute capability"), ::llvm::cl::init(90)};
private:
};
} // namespace impl
#undef GEN_PASS_DEF_TRITONGPUWSFEASIBILITYCHECKING
#endif // GEN_PASS_DEF_TRITONGPUWSFEASIBILITYCHECKING

//===----------------------------------------------------------------------===//
// TritonGPUWSFixupMissingAttrs
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_TRITONGPUWSFIXUPMISSINGATTRS
#undef GEN_PASS_DECL_TRITONGPUWSFIXUPMISSINGATTRS
#endif // GEN_PASS_DECL_TRITONGPUWSFIXUPMISSINGATTRS
#ifdef GEN_PASS_DEF_TRITONGPUWSFIXUPMISSINGATTRS
namespace impl {

template <typename DerivedT>
class TritonGPUWSFixupMissingAttrsBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = TritonGPUWSFixupMissingAttrsBase;

  TritonGPUWSFixupMissingAttrsBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  TritonGPUWSFixupMissingAttrsBase(const TritonGPUWSFixupMissingAttrsBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("triton-nvidia-gpu-ws-fixup-missing-attrs");
  }
  ::llvm::StringRef getArgument() const override { return "triton-nvidia-gpu-ws-fixup-missing-attrs"; }

  ::llvm::StringRef getDescription() const override { return "Fixup missing WS related attributes"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TritonGPUWSFixupMissingAttrs");
  }
  ::llvm::StringRef getName() const override { return "TritonGPUWSFixupMissingAttrs"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::triton::gpu::TritonGPUDialect>();
    registry.insert<mlir::triton::nvidia_gpu::TritonNvidiaGPUDialect>();
    registry.insert<mlir::scf::SCFDialect>();
    registry.insert<mlir::arith::ArithDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TritonGPUWSFixupMissingAttrsBase<DerivedT>)

protected:
private:
};
} // namespace impl
#undef GEN_PASS_DEF_TRITONGPUWSFIXUPMISSINGATTRS
#endif // GEN_PASS_DEF_TRITONGPUWSFIXUPMISSINGATTRS

//===----------------------------------------------------------------------===//
// TritonGPUWSMaterialization
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_TRITONGPUWSMATERIALIZATION
struct TritonGPUWSMaterializationOptions {
  int32_t computeCapability = 90;
};
#undef GEN_PASS_DECL_TRITONGPUWSMATERIALIZATION
#endif // GEN_PASS_DECL_TRITONGPUWSMATERIALIZATION
#ifdef GEN_PASS_DEF_TRITONGPUWSMATERIALIZATION
namespace impl {

template <typename DerivedT>
class TritonGPUWSMaterializationBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = TritonGPUWSMaterializationBase;

  TritonGPUWSMaterializationBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  TritonGPUWSMaterializationBase(const TritonGPUWSMaterializationBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("triton-nvidia-gpu-ws-materialization");
  }
  ::llvm::StringRef getArgument() const override { return "triton-nvidia-gpu-ws-materialization"; }

  ::llvm::StringRef getDescription() const override { return "Warp specialization materialization"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TritonGPUWSMaterialization");
  }
  ::llvm::StringRef getName() const override { return "TritonGPUWSMaterialization"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::triton::gpu::TritonGPUDialect>();
    registry.insert<mlir::triton::nvidia_gpu::TritonNvidiaGPUDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TritonGPUWSMaterializationBase<DerivedT>)

  TritonGPUWSMaterializationBase(const TritonGPUWSMaterializationOptions &options) : TritonGPUWSMaterializationBase() {
    computeCapability = options.computeCapability;
  }
protected:
  ::mlir::Pass::Option<int32_t> computeCapability{*this, "compute-capability", ::llvm::cl::desc("device compute capability"), ::llvm::cl::init(90)};
private:
};
} // namespace impl
#undef GEN_PASS_DEF_TRITONGPUWSMATERIALIZATION
#endif // GEN_PASS_DEF_TRITONGPUWSMATERIALIZATION

//===----------------------------------------------------------------------===//
// TritonGPUWSMutex
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_TRITONGPUWSMUTEX
struct TritonGPUWSMutexOptions {
  int32_t computeCapability = 80;
};
#undef GEN_PASS_DECL_TRITONGPUWSMUTEX
#endif // GEN_PASS_DECL_TRITONGPUWSMUTEX
#ifdef GEN_PASS_DEF_TRITONGPUWSMUTEX
namespace impl {

template <typename DerivedT>
class TritonGPUWSMutexBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = TritonGPUWSMutexBase;

  TritonGPUWSMutexBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  TritonGPUWSMutexBase(const TritonGPUWSMutexBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("triton-nvidia-gpu-ws-mutex");
  }
  ::llvm::StringRef getArgument() const override { return "triton-nvidia-gpu-ws-mutex"; }

  ::llvm::StringRef getDescription() const override { return "Warp specialization mutex synchronization"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TritonGPUWSMutex");
  }
  ::llvm::StringRef getName() const override { return "TritonGPUWSMutex"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::triton::gpu::TritonGPUDialect>();
    registry.insert<mlir::triton::nvidia_gpu::TritonNvidiaGPUDialect>();
    registry.insert<mlir::scf::SCFDialect>();
    registry.insert<mlir::arith::ArithDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TritonGPUWSMutexBase<DerivedT>)

  TritonGPUWSMutexBase(const TritonGPUWSMutexOptions &options) : TritonGPUWSMutexBase() {
    computeCapability = options.computeCapability;
  }
protected:
  ::mlir::Pass::Option<int32_t> computeCapability{*this, "compute-capability", ::llvm::cl::desc("device compute capability"), ::llvm::cl::init(80)};
private:
};
} // namespace impl
#undef GEN_PASS_DEF_TRITONGPUWSMUTEX
#endif // GEN_PASS_DEF_TRITONGPUWSMUTEX

//===----------------------------------------------------------------------===//
// TritonGPUWSPipeline
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_TRITONGPUWSPIPELINE
struct TritonGPUWSPipelineOptions {
  int32_t numStages = 3;
  int32_t numWarps = 12;
  int32_t computeCapability = 90;
};
#undef GEN_PASS_DECL_TRITONGPUWSPIPELINE
#endif // GEN_PASS_DECL_TRITONGPUWSPIPELINE
#ifdef GEN_PASS_DEF_TRITONGPUWSPIPELINE
namespace impl {

template <typename DerivedT>
class TritonGPUWSPipelineBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = TritonGPUWSPipelineBase;

  TritonGPUWSPipelineBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  TritonGPUWSPipelineBase(const TritonGPUWSPipelineBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("triton-nvidia-gpu-ws-pipeline");
  }
  ::llvm::StringRef getArgument() const override { return "triton-nvidia-gpu-ws-pipeline"; }

  ::llvm::StringRef getDescription() const override { return "Warp specialization pipeline"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TritonGPUWSPipeline");
  }
  ::llvm::StringRef getName() const override { return "TritonGPUWSPipeline"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::triton::gpu::TritonGPUDialect>();
    registry.insert<mlir::triton::nvidia_gpu::TritonNvidiaGPUDialect>();
    registry.insert<mlir::scf::SCFDialect>();
    registry.insert<mlir::arith::ArithDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TritonGPUWSPipelineBase<DerivedT>)

  TritonGPUWSPipelineBase(const TritonGPUWSPipelineOptions &options) : TritonGPUWSPipelineBase() {
    numStages = options.numStages;
    numWarps = options.numWarps;
    computeCapability = options.computeCapability;
  }
protected:
  ::mlir::Pass::Option<int32_t> numStages{*this, "num-stages", ::llvm::cl::desc("number of pipeline stages"), ::llvm::cl::init(3)};
  ::mlir::Pass::Option<int32_t> numWarps{*this, "num-warps", ::llvm::cl::desc("number of warps per block"), ::llvm::cl::init(12)};
  ::mlir::Pass::Option<int32_t> computeCapability{*this, "compute-capability", ::llvm::cl::desc("device compute capability"), ::llvm::cl::init(90)};
private:
};
} // namespace impl
#undef GEN_PASS_DEF_TRITONGPUWSPIPELINE
#endif // GEN_PASS_DEF_TRITONGPUWSPIPELINE
#ifdef GEN_PASS_REGISTRATION

//===----------------------------------------------------------------------===//
// MaterializeLoadStore Registration
//===----------------------------------------------------------------------===//

inline void registerMaterializeLoadStore() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::createTritonNvidiaGPUMaterializeLoadStorePass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerMaterializeLoadStorePass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::createTritonNvidiaGPUMaterializeLoadStorePass();
  });
}

//===----------------------------------------------------------------------===//
// TritonGPUAddDescriptorArgs Registration
//===----------------------------------------------------------------------===//

inline void registerTritonGPUAddDescriptorArgs() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::createTritonNvidiaGPUAddDescriptorArgs();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerTritonGPUAddDescriptorArgsPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::createTritonNvidiaGPUAddDescriptorArgs();
  });
}

//===----------------------------------------------------------------------===//
// TritonGPUFenceInsertion Registration
//===----------------------------------------------------------------------===//

inline void registerTritonGPUFenceInsertion() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::createTritonNvidiaGPUFenceInsertionPass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerTritonGPUFenceInsertionPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::createTritonNvidiaGPUFenceInsertionPass();
  });
}

//===----------------------------------------------------------------------===//
// TritonGPUPlanCTAPass Registration
//===----------------------------------------------------------------------===//

inline void registerTritonGPUPlanCTAPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::createTritonNvidiaGPUPlanCTAPass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerTritonGPUPlanCTAPassPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::createTritonNvidiaGPUPlanCTAPass();
  });
}

//===----------------------------------------------------------------------===//
// TritonGPURewriteTensorPointer Registration
//===----------------------------------------------------------------------===//

inline void registerTritonGPURewriteTensorPointer() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::createTritonGPURewriteTensorPointerPass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerTritonGPURewriteTensorPointerPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::createTritonGPURewriteTensorPointerPass();
  });
}

//===----------------------------------------------------------------------===//
// TritonGPUWSDecomposing Registration
//===----------------------------------------------------------------------===//

inline void registerTritonGPUWSDecomposing() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::createTritonNvidiaGPUWSDecomposingPass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerTritonGPUWSDecomposingPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::createTritonNvidiaGPUWSDecomposingPass();
  });
}

//===----------------------------------------------------------------------===//
// TritonGPUWSFeasibilityChecking Registration
//===----------------------------------------------------------------------===//

inline void registerTritonGPUWSFeasibilityChecking() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::createTritonNvidiaGPUWSFeasibilityCheckingPass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerTritonGPUWSFeasibilityCheckingPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::createTritonNvidiaGPUWSFeasibilityCheckingPass();
  });
}

//===----------------------------------------------------------------------===//
// TritonGPUWSFixupMissingAttrs Registration
//===----------------------------------------------------------------------===//

inline void registerTritonGPUWSFixupMissingAttrs() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::createTritonNvidiaGPUWSFixupMissingAttrs();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerTritonGPUWSFixupMissingAttrsPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::createTritonNvidiaGPUWSFixupMissingAttrs();
  });
}

//===----------------------------------------------------------------------===//
// TritonGPUWSMaterialization Registration
//===----------------------------------------------------------------------===//

inline void registerTritonGPUWSMaterialization() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::createTritonNvidiaGPUWSMaterializationPass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerTritonGPUWSMaterializationPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::createTritonNvidiaGPUWSMaterializationPass();
  });
}

//===----------------------------------------------------------------------===//
// TritonGPUWSMutex Registration
//===----------------------------------------------------------------------===//

inline void registerTritonGPUWSMutex() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::createTritonNvidiaGPUWSMutexPass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerTritonGPUWSMutexPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::createTritonNvidiaGPUWSMutexPass();
  });
}

//===----------------------------------------------------------------------===//
// TritonGPUWSPipeline Registration
//===----------------------------------------------------------------------===//

inline void registerTritonGPUWSPipeline() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::createTritonNvidiaGPUWSPipelinePass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerTritonGPUWSPipelinePass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::createTritonNvidiaGPUWSPipelinePass();
  });
}

//===----------------------------------------------------------------------===//
// TritonNvidiaGPU Registration
//===----------------------------------------------------------------------===//

inline void registerTritonNvidiaGPUPasses() {
  registerMaterializeLoadStore();
  registerTritonGPUAddDescriptorArgs();
  registerTritonGPUFenceInsertion();
  registerTritonGPUPlanCTAPass();
  registerTritonGPURewriteTensorPointer();
  registerTritonGPUWSDecomposing();
  registerTritonGPUWSFeasibilityChecking();
  registerTritonGPUWSFixupMissingAttrs();
  registerTritonGPUWSMaterialization();
  registerTritonGPUWSMutex();
  registerTritonGPUWSPipeline();
}
#undef GEN_PASS_REGISTRATION
#endif // GEN_PASS_REGISTRATION
// Deprecated. Please use the new per-pass macros.
#ifdef GEN_PASS_CLASSES

template <typename DerivedT>
class MaterializeLoadStoreBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = MaterializeLoadStoreBase;

  MaterializeLoadStoreBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  MaterializeLoadStoreBase(const MaterializeLoadStoreBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("triton-nvidia-gpu-materialize-load-store");
  }
  ::llvm::StringRef getArgument() const override { return "triton-nvidia-gpu-materialize-load-store"; }

  ::llvm::StringRef getDescription() const override { return "materialize load & store"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("MaterializeLoadStore");
  }
  ::llvm::StringRef getName() const override { return "MaterializeLoadStore"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::triton::gpu::TritonGPUDialect>();
    registry.insert<mlir::triton::nvidia_gpu::TritonNvidiaGPUDialect>();
    registry.insert<mlir::scf::SCFDialect>();
    registry.insert<mlir::arith::ArithDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(MaterializeLoadStoreBase<DerivedT>)

protected:
  ::mlir::Pass::Option<int32_t> numWarps{*this, "num-warps", ::llvm::cl::desc("number of warps per block"), ::llvm::cl::init(4)};
  ::mlir::Pass::Option<int32_t> computeCapability{*this, "compute-capability", ::llvm::cl::desc("device compute capability"), ::llvm::cl::init(80)};
};

template <typename DerivedT>
class TritonGPUAddDescriptorArgsBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = TritonGPUAddDescriptorArgsBase;

  TritonGPUAddDescriptorArgsBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  TritonGPUAddDescriptorArgsBase(const TritonGPUAddDescriptorArgsBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("triton-nvidia-gpu-add-descriptor-args");
  }
  ::llvm::StringRef getArgument() const override { return "triton-nvidia-gpu-add-descriptor-args"; }

  ::llvm::StringRef getDescription() const override { return ""; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TritonGPUAddDescriptorArgs");
  }
  ::llvm::StringRef getName() const override { return "TritonGPUAddDescriptorArgs"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TritonGPUAddDescriptorArgsBase<DerivedT>)

protected:
};

template <typename DerivedT>
class TritonGPUFenceInsertionBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = TritonGPUFenceInsertionBase;

  TritonGPUFenceInsertionBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  TritonGPUFenceInsertionBase(const TritonGPUFenceInsertionBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("triton-nvidia-gpu-fence-insertion");
  }
  ::llvm::StringRef getArgument() const override { return "triton-nvidia-gpu-fence-insertion"; }

  ::llvm::StringRef getDescription() const override { return "Insert fences across generic and async proxy"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TritonGPUFenceInsertion");
  }
  ::llvm::StringRef getName() const override { return "TritonGPUFenceInsertion"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::triton::gpu::TritonGPUDialect>();
    registry.insert<mlir::triton::nvidia_gpu::TritonNvidiaGPUDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TritonGPUFenceInsertionBase<DerivedT>)

protected:
  ::mlir::Pass::Option<int32_t> computeCapability{*this, "compute-capability", ::llvm::cl::desc("device compute capability"), ::llvm::cl::init(90)};
};

template <typename DerivedT>
class TritonGPUPlanCTAPassBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = TritonGPUPlanCTAPassBase;

  TritonGPUPlanCTAPassBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  TritonGPUPlanCTAPassBase(const TritonGPUPlanCTAPassBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("triton-nvidia-gpu-plan-cta");
  }
  ::llvm::StringRef getArgument() const override { return "triton-nvidia-gpu-plan-cta"; }

  ::llvm::StringRef getDescription() const override { return "plan CTA"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TritonGPUPlanCTAPass");
  }
  ::llvm::StringRef getName() const override { return "TritonGPUPlanCTAPass"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::triton::gpu::TritonGPUDialect>();
    registry.insert<mlir::triton::nvidia_gpu::TritonNvidiaGPUDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TritonGPUPlanCTAPassBase<DerivedT>)

protected:
};

template <typename DerivedT>
class TritonGPURewriteTensorPointerBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = TritonGPURewriteTensorPointerBase;

  TritonGPURewriteTensorPointerBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  TritonGPURewriteTensorPointerBase(const TritonGPURewriteTensorPointerBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("tritongpu-rewrite-tensor-pointer");
  }
  ::llvm::StringRef getArgument() const override { return "tritongpu-rewrite-tensor-pointer"; }

  ::llvm::StringRef getDescription() const override { return "Rewrite load/stores with tensor pointers into legacy load/stores"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TritonGPURewriteTensorPointer");
  }
  ::llvm::StringRef getName() const override { return "TritonGPURewriteTensorPointer"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::triton::gpu::TritonGPUDialect>();
    registry.insert<mlir::triton::TritonDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TritonGPURewriteTensorPointerBase<DerivedT>)

protected:
  ::mlir::Pass::Option<int32_t> computeCapability{*this, "compute-capability", ::llvm::cl::desc("device compute capability"), ::llvm::cl::init(80)};
};

template <typename DerivedT>
class TritonGPUWSDecomposingBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = TritonGPUWSDecomposingBase;

  TritonGPUWSDecomposingBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  TritonGPUWSDecomposingBase(const TritonGPUWSDecomposingBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("triton-nvidia-gpu-ws-decomposing");
  }
  ::llvm::StringRef getArgument() const override { return "triton-nvidia-gpu-ws-decomposing"; }

  ::llvm::StringRef getDescription() const override { return "Clustering on the ops according to their performance hotspots"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TritonGPUWSDecomposing");
  }
  ::llvm::StringRef getName() const override { return "TritonGPUWSDecomposing"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::triton::gpu::TritonGPUDialect>();
    registry.insert<mlir::triton::nvidia_gpu::TritonNvidiaGPUDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TritonGPUWSDecomposingBase<DerivedT>)

protected:
  ::mlir::Pass::Option<int32_t> computeCapability{*this, "compute-capability", ::llvm::cl::desc("device compute capability"), ::llvm::cl::init(80)};
};

template <typename DerivedT>
class TritonGPUWSFeasibilityCheckingBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = TritonGPUWSFeasibilityCheckingBase;

  TritonGPUWSFeasibilityCheckingBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  TritonGPUWSFeasibilityCheckingBase(const TritonGPUWSFeasibilityCheckingBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("triton-nvidia-gpu-ws-feasibility-checking");
  }
  ::llvm::StringRef getArgument() const override { return "triton-nvidia-gpu-ws-feasibility-checking"; }

  ::llvm::StringRef getDescription() const override { return "Attach attr named TritonNvidiaGPUDialect::getWSSupportedAttrName() if auto WS supported"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TritonGPUWSFeasibilityChecking");
  }
  ::llvm::StringRef getName() const override { return "TritonGPUWSFeasibilityChecking"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::triton::gpu::TritonGPUDialect>();
    registry.insert<mlir::triton::nvidia_gpu::TritonNvidiaGPUDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TritonGPUWSFeasibilityCheckingBase<DerivedT>)

protected:
  ::mlir::Pass::Option<int32_t> computeCapability{*this, "compute-capability", ::llvm::cl::desc("device compute capability"), ::llvm::cl::init(90)};
};

template <typename DerivedT>
class TritonGPUWSFixupMissingAttrsBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = TritonGPUWSFixupMissingAttrsBase;

  TritonGPUWSFixupMissingAttrsBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  TritonGPUWSFixupMissingAttrsBase(const TritonGPUWSFixupMissingAttrsBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("triton-nvidia-gpu-ws-fixup-missing-attrs");
  }
  ::llvm::StringRef getArgument() const override { return "triton-nvidia-gpu-ws-fixup-missing-attrs"; }

  ::llvm::StringRef getDescription() const override { return "Fixup missing WS related attributes"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TritonGPUWSFixupMissingAttrs");
  }
  ::llvm::StringRef getName() const override { return "TritonGPUWSFixupMissingAttrs"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::triton::gpu::TritonGPUDialect>();
    registry.insert<mlir::triton::nvidia_gpu::TritonNvidiaGPUDialect>();
    registry.insert<mlir::scf::SCFDialect>();
    registry.insert<mlir::arith::ArithDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TritonGPUWSFixupMissingAttrsBase<DerivedT>)

protected:
};

template <typename DerivedT>
class TritonGPUWSMaterializationBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = TritonGPUWSMaterializationBase;

  TritonGPUWSMaterializationBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  TritonGPUWSMaterializationBase(const TritonGPUWSMaterializationBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("triton-nvidia-gpu-ws-materialization");
  }
  ::llvm::StringRef getArgument() const override { return "triton-nvidia-gpu-ws-materialization"; }

  ::llvm::StringRef getDescription() const override { return "Warp specialization materialization"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TritonGPUWSMaterialization");
  }
  ::llvm::StringRef getName() const override { return "TritonGPUWSMaterialization"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::triton::gpu::TritonGPUDialect>();
    registry.insert<mlir::triton::nvidia_gpu::TritonNvidiaGPUDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TritonGPUWSMaterializationBase<DerivedT>)

protected:
  ::mlir::Pass::Option<int32_t> computeCapability{*this, "compute-capability", ::llvm::cl::desc("device compute capability"), ::llvm::cl::init(90)};
};

template <typename DerivedT>
class TritonGPUWSMutexBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = TritonGPUWSMutexBase;

  TritonGPUWSMutexBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  TritonGPUWSMutexBase(const TritonGPUWSMutexBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("triton-nvidia-gpu-ws-mutex");
  }
  ::llvm::StringRef getArgument() const override { return "triton-nvidia-gpu-ws-mutex"; }

  ::llvm::StringRef getDescription() const override { return "Warp specialization mutex synchronization"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TritonGPUWSMutex");
  }
  ::llvm::StringRef getName() const override { return "TritonGPUWSMutex"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::triton::gpu::TritonGPUDialect>();
    registry.insert<mlir::triton::nvidia_gpu::TritonNvidiaGPUDialect>();
    registry.insert<mlir::scf::SCFDialect>();
    registry.insert<mlir::arith::ArithDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TritonGPUWSMutexBase<DerivedT>)

protected:
  ::mlir::Pass::Option<int32_t> computeCapability{*this, "compute-capability", ::llvm::cl::desc("device compute capability"), ::llvm::cl::init(80)};
};

template <typename DerivedT>
class TritonGPUWSPipelineBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = TritonGPUWSPipelineBase;

  TritonGPUWSPipelineBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  TritonGPUWSPipelineBase(const TritonGPUWSPipelineBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("triton-nvidia-gpu-ws-pipeline");
  }
  ::llvm::StringRef getArgument() const override { return "triton-nvidia-gpu-ws-pipeline"; }

  ::llvm::StringRef getDescription() const override { return "Warp specialization pipeline"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TritonGPUWSPipeline");
  }
  ::llvm::StringRef getName() const override { return "TritonGPUWSPipeline"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::triton::gpu::TritonGPUDialect>();
    registry.insert<mlir::triton::nvidia_gpu::TritonNvidiaGPUDialect>();
    registry.insert<mlir::scf::SCFDialect>();
    registry.insert<mlir::arith::ArithDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TritonGPUWSPipelineBase<DerivedT>)

protected:
  ::mlir::Pass::Option<int32_t> numStages{*this, "num-stages", ::llvm::cl::desc("number of pipeline stages"), ::llvm::cl::init(3)};
  ::mlir::Pass::Option<int32_t> numWarps{*this, "num-warps", ::llvm::cl::desc("number of warps per block"), ::llvm::cl::init(12)};
  ::mlir::Pass::Option<int32_t> computeCapability{*this, "compute-capability", ::llvm::cl::desc("device compute capability"), ::llvm::cl::init(90)};
};
#undef GEN_PASS_CLASSES
#endif // GEN_PASS_CLASSES
