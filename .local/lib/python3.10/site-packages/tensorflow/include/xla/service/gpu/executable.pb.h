// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xla/service/gpu/executable.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_xla_2fservice_2fgpu_2fexecutable_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_xla_2fservice_2fgpu_2fexecutable_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "xla/service/hlo.pb.h"
#include "xla/xla.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_xla_2fservice_2fgpu_2fexecutable_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_xla_2fservice_2fgpu_2fexecutable_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_xla_2fservice_2fgpu_2fexecutable_2eproto;
namespace xla {
namespace gpu {
class CompilationResultProto;
struct CompilationResultProtoDefaultTypeInternal;
extern CompilationResultProtoDefaultTypeInternal _CompilationResultProto_default_instance_;
class XlaRuntimeGpuExecutableProto;
struct XlaRuntimeGpuExecutableProtoDefaultTypeInternal;
extern XlaRuntimeGpuExecutableProtoDefaultTypeInternal _XlaRuntimeGpuExecutableProto_default_instance_;
class XlaRuntimeGpuExecutableProto_ConstantInfoProto;
struct XlaRuntimeGpuExecutableProto_ConstantInfoProtoDefaultTypeInternal;
extern XlaRuntimeGpuExecutableProto_ConstantInfoProtoDefaultTypeInternal _XlaRuntimeGpuExecutableProto_ConstantInfoProto_default_instance_;
}  // namespace gpu
}  // namespace xla
PROTOBUF_NAMESPACE_OPEN
template<> ::xla::gpu::CompilationResultProto* Arena::CreateMaybeMessage<::xla::gpu::CompilationResultProto>(Arena*);
template<> ::xla::gpu::XlaRuntimeGpuExecutableProto* Arena::CreateMaybeMessage<::xla::gpu::XlaRuntimeGpuExecutableProto>(Arena*);
template<> ::xla::gpu::XlaRuntimeGpuExecutableProto_ConstantInfoProto* Arena::CreateMaybeMessage<::xla::gpu::XlaRuntimeGpuExecutableProto_ConstantInfoProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xla {
namespace gpu {

// ===================================================================

class XlaRuntimeGpuExecutableProto_ConstantInfoProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.gpu.XlaRuntimeGpuExecutableProto.ConstantInfoProto) */ {
 public:
  inline XlaRuntimeGpuExecutableProto_ConstantInfoProto() : XlaRuntimeGpuExecutableProto_ConstantInfoProto(nullptr) {}
  ~XlaRuntimeGpuExecutableProto_ConstantInfoProto() override;
  explicit PROTOBUF_CONSTEXPR XlaRuntimeGpuExecutableProto_ConstantInfoProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  XlaRuntimeGpuExecutableProto_ConstantInfoProto(const XlaRuntimeGpuExecutableProto_ConstantInfoProto& from);
  XlaRuntimeGpuExecutableProto_ConstantInfoProto(XlaRuntimeGpuExecutableProto_ConstantInfoProto&& from) noexcept
    : XlaRuntimeGpuExecutableProto_ConstantInfoProto() {
    *this = ::std::move(from);
  }

  inline XlaRuntimeGpuExecutableProto_ConstantInfoProto& operator=(const XlaRuntimeGpuExecutableProto_ConstantInfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline XlaRuntimeGpuExecutableProto_ConstantInfoProto& operator=(XlaRuntimeGpuExecutableProto_ConstantInfoProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const XlaRuntimeGpuExecutableProto_ConstantInfoProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const XlaRuntimeGpuExecutableProto_ConstantInfoProto* internal_default_instance() {
    return reinterpret_cast<const XlaRuntimeGpuExecutableProto_ConstantInfoProto*>(
               &_XlaRuntimeGpuExecutableProto_ConstantInfoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(XlaRuntimeGpuExecutableProto_ConstantInfoProto& a, XlaRuntimeGpuExecutableProto_ConstantInfoProto& b) {
    a.Swap(&b);
  }
  inline void Swap(XlaRuntimeGpuExecutableProto_ConstantInfoProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(XlaRuntimeGpuExecutableProto_ConstantInfoProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  XlaRuntimeGpuExecutableProto_ConstantInfoProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<XlaRuntimeGpuExecutableProto_ConstantInfoProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const XlaRuntimeGpuExecutableProto_ConstantInfoProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const XlaRuntimeGpuExecutableProto_ConstantInfoProto& from) {
    XlaRuntimeGpuExecutableProto_ConstantInfoProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XlaRuntimeGpuExecutableProto_ConstantInfoProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.gpu.XlaRuntimeGpuExecutableProto.ConstantInfoProto";
  }
  protected:
  explicit XlaRuntimeGpuExecutableProto_ConstantInfoProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolNameFieldNumber = 1,
    kContentFieldNumber = 2,
    kAllocationIndexFieldNumber = 3,
  };
  // string symbol_name = 1;
  void clear_symbol_name();
  const std::string& symbol_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_symbol_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_symbol_name();
  PROTOBUF_NODISCARD std::string* release_symbol_name();
  void set_allocated_symbol_name(std::string* symbol_name);
  private:
  const std::string& _internal_symbol_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol_name(const std::string& value);
  std::string* _internal_mutable_symbol_name();
  public:

  // bytes content = 2;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // int32 allocation_index = 3;
  void clear_allocation_index();
  int32_t allocation_index() const;
  void set_allocation_index(int32_t value);
  private:
  int32_t _internal_allocation_index() const;
  void _internal_set_allocation_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:xla.gpu.XlaRuntimeGpuExecutableProto.ConstantInfoProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    int32_t allocation_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xla_2fservice_2fgpu_2fexecutable_2eproto;
};
// -------------------------------------------------------------------

class XlaRuntimeGpuExecutableProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.gpu.XlaRuntimeGpuExecutableProto) */ {
 public:
  inline XlaRuntimeGpuExecutableProto() : XlaRuntimeGpuExecutableProto(nullptr) {}
  ~XlaRuntimeGpuExecutableProto() override;
  explicit PROTOBUF_CONSTEXPR XlaRuntimeGpuExecutableProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  XlaRuntimeGpuExecutableProto(const XlaRuntimeGpuExecutableProto& from);
  XlaRuntimeGpuExecutableProto(XlaRuntimeGpuExecutableProto&& from) noexcept
    : XlaRuntimeGpuExecutableProto() {
    *this = ::std::move(from);
  }

  inline XlaRuntimeGpuExecutableProto& operator=(const XlaRuntimeGpuExecutableProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline XlaRuntimeGpuExecutableProto& operator=(XlaRuntimeGpuExecutableProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const XlaRuntimeGpuExecutableProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const XlaRuntimeGpuExecutableProto* internal_default_instance() {
    return reinterpret_cast<const XlaRuntimeGpuExecutableProto*>(
               &_XlaRuntimeGpuExecutableProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(XlaRuntimeGpuExecutableProto& a, XlaRuntimeGpuExecutableProto& b) {
    a.Swap(&b);
  }
  inline void Swap(XlaRuntimeGpuExecutableProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(XlaRuntimeGpuExecutableProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  XlaRuntimeGpuExecutableProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<XlaRuntimeGpuExecutableProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const XlaRuntimeGpuExecutableProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const XlaRuntimeGpuExecutableProto& from) {
    XlaRuntimeGpuExecutableProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XlaRuntimeGpuExecutableProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.gpu.XlaRuntimeGpuExecutableProto";
  }
  protected:
  explicit XlaRuntimeGpuExecutableProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef XlaRuntimeGpuExecutableProto_ConstantInfoProto ConstantInfoProto;

  // accessors -------------------------------------------------------

  enum : int {
    kConstantsFieldNumber = 5,
    kGpuAsmTextFieldNumber = 3,
    kGpuBinaryFieldNumber = 4,
    kXlaRuntimeExecutableFieldNumber = 1,
  };
  // repeated .xla.gpu.XlaRuntimeGpuExecutableProto.ConstantInfoProto constants = 5;
  int constants_size() const;
  private:
  int _internal_constants_size() const;
  public:
  void clear_constants();
  ::xla::gpu::XlaRuntimeGpuExecutableProto_ConstantInfoProto* mutable_constants(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::gpu::XlaRuntimeGpuExecutableProto_ConstantInfoProto >*
      mutable_constants();
  private:
  const ::xla::gpu::XlaRuntimeGpuExecutableProto_ConstantInfoProto& _internal_constants(int index) const;
  ::xla::gpu::XlaRuntimeGpuExecutableProto_ConstantInfoProto* _internal_add_constants();
  public:
  const ::xla::gpu::XlaRuntimeGpuExecutableProto_ConstantInfoProto& constants(int index) const;
  ::xla::gpu::XlaRuntimeGpuExecutableProto_ConstantInfoProto* add_constants();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::gpu::XlaRuntimeGpuExecutableProto_ConstantInfoProto >&
      constants() const;

  // string gpu_asm_text = 3;
  void clear_gpu_asm_text();
  const std::string& gpu_asm_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gpu_asm_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gpu_asm_text();
  PROTOBUF_NODISCARD std::string* release_gpu_asm_text();
  void set_allocated_gpu_asm_text(std::string* gpu_asm_text);
  private:
  const std::string& _internal_gpu_asm_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gpu_asm_text(const std::string& value);
  std::string* _internal_mutable_gpu_asm_text();
  public:

  // bytes gpu_binary = 4;
  void clear_gpu_binary();
  const std::string& gpu_binary() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gpu_binary(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gpu_binary();
  PROTOBUF_NODISCARD std::string* release_gpu_binary();
  void set_allocated_gpu_binary(std::string* gpu_binary);
  private:
  const std::string& _internal_gpu_binary() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gpu_binary(const std::string& value);
  std::string* _internal_mutable_gpu_binary();
  public:

  // .xla.XlaRuntimeExecutableProto xla_runtime_executable = 1;
  bool has_xla_runtime_executable() const;
  private:
  bool _internal_has_xla_runtime_executable() const;
  public:
  void clear_xla_runtime_executable();
  const ::xla::XlaRuntimeExecutableProto& xla_runtime_executable() const;
  PROTOBUF_NODISCARD ::xla::XlaRuntimeExecutableProto* release_xla_runtime_executable();
  ::xla::XlaRuntimeExecutableProto* mutable_xla_runtime_executable();
  void set_allocated_xla_runtime_executable(::xla::XlaRuntimeExecutableProto* xla_runtime_executable);
  private:
  const ::xla::XlaRuntimeExecutableProto& _internal_xla_runtime_executable() const;
  ::xla::XlaRuntimeExecutableProto* _internal_mutable_xla_runtime_executable();
  public:
  void unsafe_arena_set_allocated_xla_runtime_executable(
      ::xla::XlaRuntimeExecutableProto* xla_runtime_executable);
  ::xla::XlaRuntimeExecutableProto* unsafe_arena_release_xla_runtime_executable();

  // @@protoc_insertion_point(class_scope:xla.gpu.XlaRuntimeGpuExecutableProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::gpu::XlaRuntimeGpuExecutableProto_ConstantInfoProto > constants_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gpu_asm_text_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gpu_binary_;
    ::xla::XlaRuntimeExecutableProto* xla_runtime_executable_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xla_2fservice_2fgpu_2fexecutable_2eproto;
};
// -------------------------------------------------------------------

class CompilationResultProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.gpu.CompilationResultProto) */ {
 public:
  inline CompilationResultProto() : CompilationResultProto(nullptr) {}
  ~CompilationResultProto() override;
  explicit PROTOBUF_CONSTEXPR CompilationResultProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CompilationResultProto(const CompilationResultProto& from);
  CompilationResultProto(CompilationResultProto&& from) noexcept
    : CompilationResultProto() {
    *this = ::std::move(from);
  }

  inline CompilationResultProto& operator=(const CompilationResultProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompilationResultProto& operator=(CompilationResultProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CompilationResultProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompilationResultProto* internal_default_instance() {
    return reinterpret_cast<const CompilationResultProto*>(
               &_CompilationResultProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CompilationResultProto& a, CompilationResultProto& b) {
    a.Swap(&b);
  }
  inline void Swap(CompilationResultProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompilationResultProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CompilationResultProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CompilationResultProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CompilationResultProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CompilationResultProto& from) {
    CompilationResultProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompilationResultProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.gpu.CompilationResultProto";
  }
  protected:
  explicit CompilationResultProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAsmTextFieldNumber = 3,
    kBinaryFieldNumber = 4,
    kHloModuleWithConfigFieldNumber = 1,
    kBufferAssignmentFieldNumber = 2,
  };
  // string asm_text = 3;
  void clear_asm_text();
  const std::string& asm_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_asm_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_asm_text();
  PROTOBUF_NODISCARD std::string* release_asm_text();
  void set_allocated_asm_text(std::string* asm_text);
  private:
  const std::string& _internal_asm_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_asm_text(const std::string& value);
  std::string* _internal_mutable_asm_text();
  public:

  // bytes binary = 4;
  void clear_binary();
  const std::string& binary() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_binary(ArgT0&& arg0, ArgT... args);
  std::string* mutable_binary();
  PROTOBUF_NODISCARD std::string* release_binary();
  void set_allocated_binary(std::string* binary);
  private:
  const std::string& _internal_binary() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_binary(const std::string& value);
  std::string* _internal_mutable_binary();
  public:

  // .xla.HloModuleProtoWithConfig hlo_module_with_config = 1;
  bool has_hlo_module_with_config() const;
  private:
  bool _internal_has_hlo_module_with_config() const;
  public:
  void clear_hlo_module_with_config();
  const ::xla::HloModuleProtoWithConfig& hlo_module_with_config() const;
  PROTOBUF_NODISCARD ::xla::HloModuleProtoWithConfig* release_hlo_module_with_config();
  ::xla::HloModuleProtoWithConfig* mutable_hlo_module_with_config();
  void set_allocated_hlo_module_with_config(::xla::HloModuleProtoWithConfig* hlo_module_with_config);
  private:
  const ::xla::HloModuleProtoWithConfig& _internal_hlo_module_with_config() const;
  ::xla::HloModuleProtoWithConfig* _internal_mutable_hlo_module_with_config();
  public:
  void unsafe_arena_set_allocated_hlo_module_with_config(
      ::xla::HloModuleProtoWithConfig* hlo_module_with_config);
  ::xla::HloModuleProtoWithConfig* unsafe_arena_release_hlo_module_with_config();

  // .xla.BufferAssignmentProto buffer_assignment = 2;
  bool has_buffer_assignment() const;
  private:
  bool _internal_has_buffer_assignment() const;
  public:
  void clear_buffer_assignment();
  const ::xla::BufferAssignmentProto& buffer_assignment() const;
  PROTOBUF_NODISCARD ::xla::BufferAssignmentProto* release_buffer_assignment();
  ::xla::BufferAssignmentProto* mutable_buffer_assignment();
  void set_allocated_buffer_assignment(::xla::BufferAssignmentProto* buffer_assignment);
  private:
  const ::xla::BufferAssignmentProto& _internal_buffer_assignment() const;
  ::xla::BufferAssignmentProto* _internal_mutable_buffer_assignment();
  public:
  void unsafe_arena_set_allocated_buffer_assignment(
      ::xla::BufferAssignmentProto* buffer_assignment);
  ::xla::BufferAssignmentProto* unsafe_arena_release_buffer_assignment();

  // @@protoc_insertion_point(class_scope:xla.gpu.CompilationResultProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asm_text_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr binary_;
    ::xla::HloModuleProtoWithConfig* hlo_module_with_config_;
    ::xla::BufferAssignmentProto* buffer_assignment_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xla_2fservice_2fgpu_2fexecutable_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// XlaRuntimeGpuExecutableProto_ConstantInfoProto

// string symbol_name = 1;
inline void XlaRuntimeGpuExecutableProto_ConstantInfoProto::clear_symbol_name() {
  _impl_.symbol_name_.ClearToEmpty();
}
inline const std::string& XlaRuntimeGpuExecutableProto_ConstantInfoProto::symbol_name() const {
  // @@protoc_insertion_point(field_get:xla.gpu.XlaRuntimeGpuExecutableProto.ConstantInfoProto.symbol_name)
  return _internal_symbol_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void XlaRuntimeGpuExecutableProto_ConstantInfoProto::set_symbol_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.symbol_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xla.gpu.XlaRuntimeGpuExecutableProto.ConstantInfoProto.symbol_name)
}
inline std::string* XlaRuntimeGpuExecutableProto_ConstantInfoProto::mutable_symbol_name() {
  std::string* _s = _internal_mutable_symbol_name();
  // @@protoc_insertion_point(field_mutable:xla.gpu.XlaRuntimeGpuExecutableProto.ConstantInfoProto.symbol_name)
  return _s;
}
inline const std::string& XlaRuntimeGpuExecutableProto_ConstantInfoProto::_internal_symbol_name() const {
  return _impl_.symbol_name_.Get();
}
inline void XlaRuntimeGpuExecutableProto_ConstantInfoProto::_internal_set_symbol_name(const std::string& value) {
  
  _impl_.symbol_name_.Set(value, GetArenaForAllocation());
}
inline std::string* XlaRuntimeGpuExecutableProto_ConstantInfoProto::_internal_mutable_symbol_name() {
  
  return _impl_.symbol_name_.Mutable(GetArenaForAllocation());
}
inline std::string* XlaRuntimeGpuExecutableProto_ConstantInfoProto::release_symbol_name() {
  // @@protoc_insertion_point(field_release:xla.gpu.XlaRuntimeGpuExecutableProto.ConstantInfoProto.symbol_name)
  return _impl_.symbol_name_.Release();
}
inline void XlaRuntimeGpuExecutableProto_ConstantInfoProto::set_allocated_symbol_name(std::string* symbol_name) {
  if (symbol_name != nullptr) {
    
  } else {
    
  }
  _impl_.symbol_name_.SetAllocated(symbol_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.symbol_name_.IsDefault()) {
    _impl_.symbol_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xla.gpu.XlaRuntimeGpuExecutableProto.ConstantInfoProto.symbol_name)
}

// bytes content = 2;
inline void XlaRuntimeGpuExecutableProto_ConstantInfoProto::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& XlaRuntimeGpuExecutableProto_ConstantInfoProto::content() const {
  // @@protoc_insertion_point(field_get:xla.gpu.XlaRuntimeGpuExecutableProto.ConstantInfoProto.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void XlaRuntimeGpuExecutableProto_ConstantInfoProto::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xla.gpu.XlaRuntimeGpuExecutableProto.ConstantInfoProto.content)
}
inline std::string* XlaRuntimeGpuExecutableProto_ConstantInfoProto::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:xla.gpu.XlaRuntimeGpuExecutableProto.ConstantInfoProto.content)
  return _s;
}
inline const std::string& XlaRuntimeGpuExecutableProto_ConstantInfoProto::_internal_content() const {
  return _impl_.content_.Get();
}
inline void XlaRuntimeGpuExecutableProto_ConstantInfoProto::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* XlaRuntimeGpuExecutableProto_ConstantInfoProto::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* XlaRuntimeGpuExecutableProto_ConstantInfoProto::release_content() {
  // @@protoc_insertion_point(field_release:xla.gpu.XlaRuntimeGpuExecutableProto.ConstantInfoProto.content)
  return _impl_.content_.Release();
}
inline void XlaRuntimeGpuExecutableProto_ConstantInfoProto::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xla.gpu.XlaRuntimeGpuExecutableProto.ConstantInfoProto.content)
}

// int32 allocation_index = 3;
inline void XlaRuntimeGpuExecutableProto_ConstantInfoProto::clear_allocation_index() {
  _impl_.allocation_index_ = 0;
}
inline int32_t XlaRuntimeGpuExecutableProto_ConstantInfoProto::_internal_allocation_index() const {
  return _impl_.allocation_index_;
}
inline int32_t XlaRuntimeGpuExecutableProto_ConstantInfoProto::allocation_index() const {
  // @@protoc_insertion_point(field_get:xla.gpu.XlaRuntimeGpuExecutableProto.ConstantInfoProto.allocation_index)
  return _internal_allocation_index();
}
inline void XlaRuntimeGpuExecutableProto_ConstantInfoProto::_internal_set_allocation_index(int32_t value) {
  
  _impl_.allocation_index_ = value;
}
inline void XlaRuntimeGpuExecutableProto_ConstantInfoProto::set_allocation_index(int32_t value) {
  _internal_set_allocation_index(value);
  // @@protoc_insertion_point(field_set:xla.gpu.XlaRuntimeGpuExecutableProto.ConstantInfoProto.allocation_index)
}

// -------------------------------------------------------------------

// XlaRuntimeGpuExecutableProto

// .xla.XlaRuntimeExecutableProto xla_runtime_executable = 1;
inline bool XlaRuntimeGpuExecutableProto::_internal_has_xla_runtime_executable() const {
  return this != internal_default_instance() && _impl_.xla_runtime_executable_ != nullptr;
}
inline bool XlaRuntimeGpuExecutableProto::has_xla_runtime_executable() const {
  return _internal_has_xla_runtime_executable();
}
inline const ::xla::XlaRuntimeExecutableProto& XlaRuntimeGpuExecutableProto::_internal_xla_runtime_executable() const {
  const ::xla::XlaRuntimeExecutableProto* p = _impl_.xla_runtime_executable_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::XlaRuntimeExecutableProto&>(
      ::xla::_XlaRuntimeExecutableProto_default_instance_);
}
inline const ::xla::XlaRuntimeExecutableProto& XlaRuntimeGpuExecutableProto::xla_runtime_executable() const {
  // @@protoc_insertion_point(field_get:xla.gpu.XlaRuntimeGpuExecutableProto.xla_runtime_executable)
  return _internal_xla_runtime_executable();
}
inline void XlaRuntimeGpuExecutableProto::unsafe_arena_set_allocated_xla_runtime_executable(
    ::xla::XlaRuntimeExecutableProto* xla_runtime_executable) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.xla_runtime_executable_);
  }
  _impl_.xla_runtime_executable_ = xla_runtime_executable;
  if (xla_runtime_executable) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.gpu.XlaRuntimeGpuExecutableProto.xla_runtime_executable)
}
inline ::xla::XlaRuntimeExecutableProto* XlaRuntimeGpuExecutableProto::release_xla_runtime_executable() {
  
  ::xla::XlaRuntimeExecutableProto* temp = _impl_.xla_runtime_executable_;
  _impl_.xla_runtime_executable_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::XlaRuntimeExecutableProto* XlaRuntimeGpuExecutableProto::unsafe_arena_release_xla_runtime_executable() {
  // @@protoc_insertion_point(field_release:xla.gpu.XlaRuntimeGpuExecutableProto.xla_runtime_executable)
  
  ::xla::XlaRuntimeExecutableProto* temp = _impl_.xla_runtime_executable_;
  _impl_.xla_runtime_executable_ = nullptr;
  return temp;
}
inline ::xla::XlaRuntimeExecutableProto* XlaRuntimeGpuExecutableProto::_internal_mutable_xla_runtime_executable() {
  
  if (_impl_.xla_runtime_executable_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::XlaRuntimeExecutableProto>(GetArenaForAllocation());
    _impl_.xla_runtime_executable_ = p;
  }
  return _impl_.xla_runtime_executable_;
}
inline ::xla::XlaRuntimeExecutableProto* XlaRuntimeGpuExecutableProto::mutable_xla_runtime_executable() {
  ::xla::XlaRuntimeExecutableProto* _msg = _internal_mutable_xla_runtime_executable();
  // @@protoc_insertion_point(field_mutable:xla.gpu.XlaRuntimeGpuExecutableProto.xla_runtime_executable)
  return _msg;
}
inline void XlaRuntimeGpuExecutableProto::set_allocated_xla_runtime_executable(::xla::XlaRuntimeExecutableProto* xla_runtime_executable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.xla_runtime_executable_);
  }
  if (xla_runtime_executable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(xla_runtime_executable));
    if (message_arena != submessage_arena) {
      xla_runtime_executable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, xla_runtime_executable, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.xla_runtime_executable_ = xla_runtime_executable;
  // @@protoc_insertion_point(field_set_allocated:xla.gpu.XlaRuntimeGpuExecutableProto.xla_runtime_executable)
}

// string gpu_asm_text = 3;
inline void XlaRuntimeGpuExecutableProto::clear_gpu_asm_text() {
  _impl_.gpu_asm_text_.ClearToEmpty();
}
inline const std::string& XlaRuntimeGpuExecutableProto::gpu_asm_text() const {
  // @@protoc_insertion_point(field_get:xla.gpu.XlaRuntimeGpuExecutableProto.gpu_asm_text)
  return _internal_gpu_asm_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void XlaRuntimeGpuExecutableProto::set_gpu_asm_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.gpu_asm_text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xla.gpu.XlaRuntimeGpuExecutableProto.gpu_asm_text)
}
inline std::string* XlaRuntimeGpuExecutableProto::mutable_gpu_asm_text() {
  std::string* _s = _internal_mutable_gpu_asm_text();
  // @@protoc_insertion_point(field_mutable:xla.gpu.XlaRuntimeGpuExecutableProto.gpu_asm_text)
  return _s;
}
inline const std::string& XlaRuntimeGpuExecutableProto::_internal_gpu_asm_text() const {
  return _impl_.gpu_asm_text_.Get();
}
inline void XlaRuntimeGpuExecutableProto::_internal_set_gpu_asm_text(const std::string& value) {
  
  _impl_.gpu_asm_text_.Set(value, GetArenaForAllocation());
}
inline std::string* XlaRuntimeGpuExecutableProto::_internal_mutable_gpu_asm_text() {
  
  return _impl_.gpu_asm_text_.Mutable(GetArenaForAllocation());
}
inline std::string* XlaRuntimeGpuExecutableProto::release_gpu_asm_text() {
  // @@protoc_insertion_point(field_release:xla.gpu.XlaRuntimeGpuExecutableProto.gpu_asm_text)
  return _impl_.gpu_asm_text_.Release();
}
inline void XlaRuntimeGpuExecutableProto::set_allocated_gpu_asm_text(std::string* gpu_asm_text) {
  if (gpu_asm_text != nullptr) {
    
  } else {
    
  }
  _impl_.gpu_asm_text_.SetAllocated(gpu_asm_text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.gpu_asm_text_.IsDefault()) {
    _impl_.gpu_asm_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xla.gpu.XlaRuntimeGpuExecutableProto.gpu_asm_text)
}

// bytes gpu_binary = 4;
inline void XlaRuntimeGpuExecutableProto::clear_gpu_binary() {
  _impl_.gpu_binary_.ClearToEmpty();
}
inline const std::string& XlaRuntimeGpuExecutableProto::gpu_binary() const {
  // @@protoc_insertion_point(field_get:xla.gpu.XlaRuntimeGpuExecutableProto.gpu_binary)
  return _internal_gpu_binary();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void XlaRuntimeGpuExecutableProto::set_gpu_binary(ArgT0&& arg0, ArgT... args) {
 
 _impl_.gpu_binary_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xla.gpu.XlaRuntimeGpuExecutableProto.gpu_binary)
}
inline std::string* XlaRuntimeGpuExecutableProto::mutable_gpu_binary() {
  std::string* _s = _internal_mutable_gpu_binary();
  // @@protoc_insertion_point(field_mutable:xla.gpu.XlaRuntimeGpuExecutableProto.gpu_binary)
  return _s;
}
inline const std::string& XlaRuntimeGpuExecutableProto::_internal_gpu_binary() const {
  return _impl_.gpu_binary_.Get();
}
inline void XlaRuntimeGpuExecutableProto::_internal_set_gpu_binary(const std::string& value) {
  
  _impl_.gpu_binary_.Set(value, GetArenaForAllocation());
}
inline std::string* XlaRuntimeGpuExecutableProto::_internal_mutable_gpu_binary() {
  
  return _impl_.gpu_binary_.Mutable(GetArenaForAllocation());
}
inline std::string* XlaRuntimeGpuExecutableProto::release_gpu_binary() {
  // @@protoc_insertion_point(field_release:xla.gpu.XlaRuntimeGpuExecutableProto.gpu_binary)
  return _impl_.gpu_binary_.Release();
}
inline void XlaRuntimeGpuExecutableProto::set_allocated_gpu_binary(std::string* gpu_binary) {
  if (gpu_binary != nullptr) {
    
  } else {
    
  }
  _impl_.gpu_binary_.SetAllocated(gpu_binary, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.gpu_binary_.IsDefault()) {
    _impl_.gpu_binary_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xla.gpu.XlaRuntimeGpuExecutableProto.gpu_binary)
}

// repeated .xla.gpu.XlaRuntimeGpuExecutableProto.ConstantInfoProto constants = 5;
inline int XlaRuntimeGpuExecutableProto::_internal_constants_size() const {
  return _impl_.constants_.size();
}
inline int XlaRuntimeGpuExecutableProto::constants_size() const {
  return _internal_constants_size();
}
inline void XlaRuntimeGpuExecutableProto::clear_constants() {
  _impl_.constants_.Clear();
}
inline ::xla::gpu::XlaRuntimeGpuExecutableProto_ConstantInfoProto* XlaRuntimeGpuExecutableProto::mutable_constants(int index) {
  // @@protoc_insertion_point(field_mutable:xla.gpu.XlaRuntimeGpuExecutableProto.constants)
  return _impl_.constants_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::gpu::XlaRuntimeGpuExecutableProto_ConstantInfoProto >*
XlaRuntimeGpuExecutableProto::mutable_constants() {
  // @@protoc_insertion_point(field_mutable_list:xla.gpu.XlaRuntimeGpuExecutableProto.constants)
  return &_impl_.constants_;
}
inline const ::xla::gpu::XlaRuntimeGpuExecutableProto_ConstantInfoProto& XlaRuntimeGpuExecutableProto::_internal_constants(int index) const {
  return _impl_.constants_.Get(index);
}
inline const ::xla::gpu::XlaRuntimeGpuExecutableProto_ConstantInfoProto& XlaRuntimeGpuExecutableProto::constants(int index) const {
  // @@protoc_insertion_point(field_get:xla.gpu.XlaRuntimeGpuExecutableProto.constants)
  return _internal_constants(index);
}
inline ::xla::gpu::XlaRuntimeGpuExecutableProto_ConstantInfoProto* XlaRuntimeGpuExecutableProto::_internal_add_constants() {
  return _impl_.constants_.Add();
}
inline ::xla::gpu::XlaRuntimeGpuExecutableProto_ConstantInfoProto* XlaRuntimeGpuExecutableProto::add_constants() {
  ::xla::gpu::XlaRuntimeGpuExecutableProto_ConstantInfoProto* _add = _internal_add_constants();
  // @@protoc_insertion_point(field_add:xla.gpu.XlaRuntimeGpuExecutableProto.constants)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::gpu::XlaRuntimeGpuExecutableProto_ConstantInfoProto >&
XlaRuntimeGpuExecutableProto::constants() const {
  // @@protoc_insertion_point(field_list:xla.gpu.XlaRuntimeGpuExecutableProto.constants)
  return _impl_.constants_;
}

// -------------------------------------------------------------------

// CompilationResultProto

// .xla.HloModuleProtoWithConfig hlo_module_with_config = 1;
inline bool CompilationResultProto::_internal_has_hlo_module_with_config() const {
  return this != internal_default_instance() && _impl_.hlo_module_with_config_ != nullptr;
}
inline bool CompilationResultProto::has_hlo_module_with_config() const {
  return _internal_has_hlo_module_with_config();
}
inline const ::xla::HloModuleProtoWithConfig& CompilationResultProto::_internal_hlo_module_with_config() const {
  const ::xla::HloModuleProtoWithConfig* p = _impl_.hlo_module_with_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::HloModuleProtoWithConfig&>(
      ::xla::_HloModuleProtoWithConfig_default_instance_);
}
inline const ::xla::HloModuleProtoWithConfig& CompilationResultProto::hlo_module_with_config() const {
  // @@protoc_insertion_point(field_get:xla.gpu.CompilationResultProto.hlo_module_with_config)
  return _internal_hlo_module_with_config();
}
inline void CompilationResultProto::unsafe_arena_set_allocated_hlo_module_with_config(
    ::xla::HloModuleProtoWithConfig* hlo_module_with_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.hlo_module_with_config_);
  }
  _impl_.hlo_module_with_config_ = hlo_module_with_config;
  if (hlo_module_with_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.gpu.CompilationResultProto.hlo_module_with_config)
}
inline ::xla::HloModuleProtoWithConfig* CompilationResultProto::release_hlo_module_with_config() {
  
  ::xla::HloModuleProtoWithConfig* temp = _impl_.hlo_module_with_config_;
  _impl_.hlo_module_with_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::HloModuleProtoWithConfig* CompilationResultProto::unsafe_arena_release_hlo_module_with_config() {
  // @@protoc_insertion_point(field_release:xla.gpu.CompilationResultProto.hlo_module_with_config)
  
  ::xla::HloModuleProtoWithConfig* temp = _impl_.hlo_module_with_config_;
  _impl_.hlo_module_with_config_ = nullptr;
  return temp;
}
inline ::xla::HloModuleProtoWithConfig* CompilationResultProto::_internal_mutable_hlo_module_with_config() {
  
  if (_impl_.hlo_module_with_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::HloModuleProtoWithConfig>(GetArenaForAllocation());
    _impl_.hlo_module_with_config_ = p;
  }
  return _impl_.hlo_module_with_config_;
}
inline ::xla::HloModuleProtoWithConfig* CompilationResultProto::mutable_hlo_module_with_config() {
  ::xla::HloModuleProtoWithConfig* _msg = _internal_mutable_hlo_module_with_config();
  // @@protoc_insertion_point(field_mutable:xla.gpu.CompilationResultProto.hlo_module_with_config)
  return _msg;
}
inline void CompilationResultProto::set_allocated_hlo_module_with_config(::xla::HloModuleProtoWithConfig* hlo_module_with_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.hlo_module_with_config_);
  }
  if (hlo_module_with_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hlo_module_with_config));
    if (message_arena != submessage_arena) {
      hlo_module_with_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hlo_module_with_config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.hlo_module_with_config_ = hlo_module_with_config;
  // @@protoc_insertion_point(field_set_allocated:xla.gpu.CompilationResultProto.hlo_module_with_config)
}

// .xla.BufferAssignmentProto buffer_assignment = 2;
inline bool CompilationResultProto::_internal_has_buffer_assignment() const {
  return this != internal_default_instance() && _impl_.buffer_assignment_ != nullptr;
}
inline bool CompilationResultProto::has_buffer_assignment() const {
  return _internal_has_buffer_assignment();
}
inline const ::xla::BufferAssignmentProto& CompilationResultProto::_internal_buffer_assignment() const {
  const ::xla::BufferAssignmentProto* p = _impl_.buffer_assignment_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::BufferAssignmentProto&>(
      ::xla::_BufferAssignmentProto_default_instance_);
}
inline const ::xla::BufferAssignmentProto& CompilationResultProto::buffer_assignment() const {
  // @@protoc_insertion_point(field_get:xla.gpu.CompilationResultProto.buffer_assignment)
  return _internal_buffer_assignment();
}
inline void CompilationResultProto::unsafe_arena_set_allocated_buffer_assignment(
    ::xla::BufferAssignmentProto* buffer_assignment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buffer_assignment_);
  }
  _impl_.buffer_assignment_ = buffer_assignment;
  if (buffer_assignment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.gpu.CompilationResultProto.buffer_assignment)
}
inline ::xla::BufferAssignmentProto* CompilationResultProto::release_buffer_assignment() {
  
  ::xla::BufferAssignmentProto* temp = _impl_.buffer_assignment_;
  _impl_.buffer_assignment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::BufferAssignmentProto* CompilationResultProto::unsafe_arena_release_buffer_assignment() {
  // @@protoc_insertion_point(field_release:xla.gpu.CompilationResultProto.buffer_assignment)
  
  ::xla::BufferAssignmentProto* temp = _impl_.buffer_assignment_;
  _impl_.buffer_assignment_ = nullptr;
  return temp;
}
inline ::xla::BufferAssignmentProto* CompilationResultProto::_internal_mutable_buffer_assignment() {
  
  if (_impl_.buffer_assignment_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::BufferAssignmentProto>(GetArenaForAllocation());
    _impl_.buffer_assignment_ = p;
  }
  return _impl_.buffer_assignment_;
}
inline ::xla::BufferAssignmentProto* CompilationResultProto::mutable_buffer_assignment() {
  ::xla::BufferAssignmentProto* _msg = _internal_mutable_buffer_assignment();
  // @@protoc_insertion_point(field_mutable:xla.gpu.CompilationResultProto.buffer_assignment)
  return _msg;
}
inline void CompilationResultProto::set_allocated_buffer_assignment(::xla::BufferAssignmentProto* buffer_assignment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buffer_assignment_);
  }
  if (buffer_assignment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(buffer_assignment));
    if (message_arena != submessage_arena) {
      buffer_assignment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buffer_assignment, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.buffer_assignment_ = buffer_assignment;
  // @@protoc_insertion_point(field_set_allocated:xla.gpu.CompilationResultProto.buffer_assignment)
}

// string asm_text = 3;
inline void CompilationResultProto::clear_asm_text() {
  _impl_.asm_text_.ClearToEmpty();
}
inline const std::string& CompilationResultProto::asm_text() const {
  // @@protoc_insertion_point(field_get:xla.gpu.CompilationResultProto.asm_text)
  return _internal_asm_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CompilationResultProto::set_asm_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.asm_text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xla.gpu.CompilationResultProto.asm_text)
}
inline std::string* CompilationResultProto::mutable_asm_text() {
  std::string* _s = _internal_mutable_asm_text();
  // @@protoc_insertion_point(field_mutable:xla.gpu.CompilationResultProto.asm_text)
  return _s;
}
inline const std::string& CompilationResultProto::_internal_asm_text() const {
  return _impl_.asm_text_.Get();
}
inline void CompilationResultProto::_internal_set_asm_text(const std::string& value) {
  
  _impl_.asm_text_.Set(value, GetArenaForAllocation());
}
inline std::string* CompilationResultProto::_internal_mutable_asm_text() {
  
  return _impl_.asm_text_.Mutable(GetArenaForAllocation());
}
inline std::string* CompilationResultProto::release_asm_text() {
  // @@protoc_insertion_point(field_release:xla.gpu.CompilationResultProto.asm_text)
  return _impl_.asm_text_.Release();
}
inline void CompilationResultProto::set_allocated_asm_text(std::string* asm_text) {
  if (asm_text != nullptr) {
    
  } else {
    
  }
  _impl_.asm_text_.SetAllocated(asm_text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.asm_text_.IsDefault()) {
    _impl_.asm_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xla.gpu.CompilationResultProto.asm_text)
}

// bytes binary = 4;
inline void CompilationResultProto::clear_binary() {
  _impl_.binary_.ClearToEmpty();
}
inline const std::string& CompilationResultProto::binary() const {
  // @@protoc_insertion_point(field_get:xla.gpu.CompilationResultProto.binary)
  return _internal_binary();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CompilationResultProto::set_binary(ArgT0&& arg0, ArgT... args) {
 
 _impl_.binary_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xla.gpu.CompilationResultProto.binary)
}
inline std::string* CompilationResultProto::mutable_binary() {
  std::string* _s = _internal_mutable_binary();
  // @@protoc_insertion_point(field_mutable:xla.gpu.CompilationResultProto.binary)
  return _s;
}
inline const std::string& CompilationResultProto::_internal_binary() const {
  return _impl_.binary_.Get();
}
inline void CompilationResultProto::_internal_set_binary(const std::string& value) {
  
  _impl_.binary_.Set(value, GetArenaForAllocation());
}
inline std::string* CompilationResultProto::_internal_mutable_binary() {
  
  return _impl_.binary_.Mutable(GetArenaForAllocation());
}
inline std::string* CompilationResultProto::release_binary() {
  // @@protoc_insertion_point(field_release:xla.gpu.CompilationResultProto.binary)
  return _impl_.binary_.Release();
}
inline void CompilationResultProto::set_allocated_binary(std::string* binary) {
  if (binary != nullptr) {
    
  } else {
    
  }
  _impl_.binary_.SetAllocated(binary, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.binary_.IsDefault()) {
    _impl_.binary_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xla.gpu.CompilationResultProto.binary)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gpu
}  // namespace xla

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_xla_2fservice_2fgpu_2fexecutable_2eproto
